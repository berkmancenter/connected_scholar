<!-- javascript -->
<script type="text/javascript">
    var clientVars = {};
</script>

<% with_etherpad_server do |protocol, host, port| %>
    <script type="text/javascript" src="<%= protocol %>://<%= host %>:<%= port %>/socket.io/socket.io.js"></script>
    <script type="text/javascript" src="<%= protocol %>://<%= host %>:<%= port %>/minified/pad.js"></script>
    <script type="text/javascript" src="/js/jquery.ui.draggable.min.js"></script>
    <script type="text/javascript" src="/js/jquery.ui.droppable.min.js"></script>
    <script type="text/javascript" src="/js/jquery.ui.accordion.min.js"></script>
    <script type="text/javascript" src="/js/jquery.ui.position.js"></script>
    <script type="text/javascript" src="/js/jquery.ui.resizable.js"></script>
    <script type="text/javascript" src="/js/jquery.ui.dialog.js"></script>
    <script>
        var etherpadServerConfig = new Array();
        etherpadServerConfig['host'] = "<%= host %>";
        etherpadServerConfig['port'] = "<%= port %>";
        etherpadServerConfig['protocol'] = "<%= protocol %>";
    </script>
    <script type="text/javascript" src="/js/handshake.js"></script>
<% end %>
<script type="text/javascript">
  $(function(){
      // rebuild the export links
      $("#exporthtmla").click(function(event){
          $("#exporthtmla").attr("href", document.location.pathname + "/export/html" + document.location.search);
      });
      $("#exportplaina").click(function(event){
        $("#exportplaina").attr("href", document.location.pathname + "/export/txt" + document.location.search);
      });
      $("#exportwordlea").click(function(event){
        $("#exportwordlea").attr("href", document.location.pathname + "/export/wordle" + document.location.search);
      });
      // rebuild timeslider link
      $("#timesliderlink").click(function(event){
          document.location = document.location.pathname +  '/timeslider' + document.location.search;
      })
  });

</script>
<script type="text/javascript">
  function htmlDecode(value){
    return $('<div/>').html(value).text();
  }

  function regexEscape(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}

  function setupDraggables(){
    $(".draggable").draggable({zIndex: 100, helper: 'clone', handle: "p", appendTo: 'body', iframeFix: true, start: startDrag });
  }
  function startDrag(event,ui){
      $(ui.helper).prepend('<div class="preDrag"></div>');
      $(this).data('draggable').offset.click.top += 124;
      setupDropzone();
    }

    function setupDropzone(){
      var win = window.parent.frames[1].frames[0].window;
      var doc = window.parent.frames[1].frames[0].document;
      var innerdocbody = $(doc).find("#innerdocbody");
      var allmagic = innerdocbody.find('div[id^="magicdomid"]');
      allmagic.droppable({
      hoverClass: 'custom-hover',
        drop: function(event, ui){
          var target = $(event.target);
          if(target.prev() != undefined && target.prev().attr("id") != undefined && target.prev().attr("id").match(/^magicdomid/)){
            target = target.prev();
          }
          var node = doc.getElementById(target.attr("id"));
          target.focus(function() {
            window.setTimeout(function() {
              setCursorPosition(0, node, doc, win);
            }, 0);
          });
          //create the new line after drop target
      resource_id = ui.draggable.attr("id").replace("drag_resource_", "");
      document_id = "<%= @document.id %>";
      setCitation(document_id, resource_id, target);
      return true;
        }
      });
    }

    function setCursorPosition(pos, node, doc, win){
        var sel, range;
        if (win.getSelection && doc.createRange) {
          range = doc.createRange();
          range.selectNode(node);
          range.setStart(node, pos);
          range.setEnd(node, pos);
          range.collapse(true);
          sel = win.getSelection();
          sel.removeAllRanges();
          sel.addRange(range);
        } else if (node.createTextRange) {
          range = node.createTextRange();
          range.collapse(true);
          range.select();
        }
    }
  
  function setCitation(document_id, resource_id, target){
    $.get("/documents/" + document_id + "/resources/" + resource_id + "/citation", function(data){
      var citation = data["citation"];
      target.after('<div>'+citation+'</div>');
      target.attr('tabindex', -1).focus();
      target.removeAttr('tabindex');
    }, 'json');
    $.post("/documents/"+document_id+"/resources/"+resource_id+"/activate", function(data){
      if(data.length > 0){
        $("#resource_"+resource_id).remove();
        $("#active_sources").append(data);
      }
      setupDraggables();
    })
  }

  function setupDynamicContextMenus(){
    document_id = "<%= @document.id %>";
    var doc = window.parent.frames[1].frames[0].document;
    var innerdocbody = $(doc).find("#innerdocbody");
    var allmagic = innerdocbody.find('div[id^="magicdomid"]');
    allmagic.live('contextmenu', function(event){
      $.get("/documents/" + document_id + "/active_citations", function(data){
        citationsInParagraph = [];
        text = $(event.currentTarget).text();
        $.each(data, function(index, citation){
          if(text.indexOf(citation.citation_text) != -1){
            citationsInParagraph.push(citation);
          }
        });

        var menuData = {
          title: 'Citations', 
          items: [{ 
            label: 'View', 
            action: function(){
              viewCitations(document_id, citationsInParagraph);
            }
          },
          {
            label: 'Remove',
            action: function(){
              initRemoveCitation(document_id, citationsInParagraph, event)
            }
          }]
        };
        contextPopup(menuData, event);        
      }, 'json');
      return false;
    });
  }

  function initRemoveCitation(document_id, citations, event){
    if(citations.length > 1){
      $("#resource_citation_select").empty();
      $.each(citations, function(index, citation){
        $("#resource_citation_select").append($("<option>").val(citation.resource_id).text(citation.citation_text));
      });
      $("#view_resource_citation_div").dialog({
        autoOpen: false,
        title: 'Citations',
        height: 115,
        width: 330,
        modal: true,
        buttons: {
            "Submit": function() {
              $(this).dialog("close");
              removeCitation(document_id, $("#resource_citation_select").val(), $("#resource_citation_select option:selected").text(), event);
            },
            "Cancel": function() {
              $(this).dialog("close");
            }
        }
      });
      $("#view_resource_citation_div").dialog("open"); 
    }else if(citations.length == 1) {
      removeCitation(document_id, citations[0].resource_id, citations[0].citation_text, event);
    }else{ //0 citations
      return false;
    }    
  }
  
  function removeCitation(document_id, resource_id, citation, event){
    target = $(event.currentTarget)
    text = target.text();
    text = text.replace(new RegExp( regexEscape(citation), "g" ), '');
    target.text(text);
    var win = window.parent.frames[1].frames[0].window;
    var doc = window.parent.frames[1].frames[0].document;
    var node = doc.getElementById(target.attr("id"));
    target.focus(function() {
      window.setTimeout(function() {
        setCursorPosition(0, node, doc, win);
      }, 0);
    });
    target.attr('tabindex', -1).focus();
    target.removeAttr('tabindex');
  }

  function viewCitations(document_id, citations){
    if(citations.length > 1){
      $("#resource_citation_select").empty();
      $.each(citations, function(index, citation){
        $("#resource_citation_select").append($("<option>").val(citation.resource_id).text(citation.citation_text));
      });
      $("#view_resource_citation_div").dialog({
        autoOpen: false,
        title: 'Citations',
        height: 115,
        width: 330,
        modal: true,
        buttons: {
            "Submit": function() {
              $(this).dialog("close");
              viewResource(document_id, $("#resource_citation_select").val(), $("#resource_citation_select option:selected").text());
            },
            "Cancel": function() {
              $(this).dialog("close");
            }
        }
      });
      $("#view_resource_citation_div").dialog("open"); 
    }else if(citations.length == 1) {
      viewResource(document_id, citations[0].resource_id, citations[0].citation_text);
    }else{ //0 citations
      return false;
    }
  }

  function setupActiveSourceContextMenus(){
    if(window.parent.frames[1] == undefined){
      window.setTimeout(function(){
        setupActiveSourceContextMenus();
      }, 1);
    }else if(window.parent.frames[1].frames[0] == undefined){
      window.setTimeout(function(){
        setupActiveSourceContextMenus();
      }, 1);
    }else if(window.parent.frames[1].frames[0].document == undefined){
      window.setTimeout(function(){
        setupActiveSourceContextMenus();
      }, 1);
    }else{
      setupDynamicContextMenus();
    }
  }

  function viewResource(document_id, resource_id, title){
    $.get("/documents/" + document_id + "/resources/" + resource_id, function(data){
        $("#resource_citation_div").html(data);
        $("#resource_citation_div").dialog({
            autoOpen: false,
            title: title,
            height: 330,
            width: 330,
            modal: true,
            buttons: {
                "Cancel": function() {
                    $(this).dialog("close");
                }
            }
        });
        $("#resource_citation_div").dialog("open");
      });
  }
  function setupViewSources(){
    $(".active_source, .recommended_resource").live('click', function(e){
      target = $(e.target);
      item_id = target.attr("id").replace("item_", "");
      document_id = "<%= @document.id %>";
      title = target.text();
      viewResource(document_id, item_id, title);
      return false;
    });
    
  }

  function contextPopup(menuData, event){
    var settings = {
      checkMenuAlreadyOpen: false,
      contextMenuClass: 'contextMenuPlugin',
      gutterLineClass: 'gutterLine',
      headerClass: 'header',
      seperatorClass: 'divider',
      title: '',
      items: []
    };
    $.extend(settings, menuData);
    var menu = createMenu(settings)
      .show()
      .css({zIndex:1000001, left:event.pageX + 25 + ($(window).width() * .2) /* nudge to the right, so the pointer is covering the title */, top:event.pageY + 36})
      .bind('contextmenu', function() { return false; });

    // Cover rest of page with invisible div that when clicked will cancel the popup.
    var bg = $('<div></div>')
      .css({left:0, top:0, width:'100%', height:'100%', position:'absolute', zIndex:1000000})
      .appendTo(document.body)
      .bind('contextmenu click', function() {
        // If click or right click anywhere else on page: remove clean up.
        bg.remove();
        menu.remove();
        return false;
      });

    // When clicking on a link in menu: clean up (in addition to handlers on link already)
    menu.find('a').click(function() {
      bg.remove();
      menu.remove();
    });

  }
  // Build popup menu HTML
  function createMenu(settings) {
    var menu = $('<ul class="' + settings.contextMenuClass + '"><div class="' + settings.gutterLineClass + '"></div></ul>')
      .appendTo(document.body);
    if (settings.title) {
      $('<li class="' + settings.headerClass + '"></li>').text(settings.title).appendTo(menu);
    }
    settings.items.forEach(function(item) {
      if (item) {
        var row = $('<li><a href="#"><img><span></span></a></li>').appendTo(menu);
        row.find('img').attr('src', item.icon);
        row.find('span').text(item.label);
        if (item.action) {
          row.find('a').click(item.action);
        }
      } else {
        $('<li class="' + settings.seperatorClass + '"></li>').appendTo(menu);
      }
    });
    menu.find('.' + settings.headerClass ).text(settings.title);
    return menu;
  }
</script>
